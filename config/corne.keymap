/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        layer-3 {
            bindings = <&mo 3>;
            key-positions = <37 40>;
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        shift_num_layer: shift_num_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&lm 1 LEFT_SHIFT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&lm 1 LSHIFT>;

            label = "SHIFT_NUM_LAYER";
        };

        hyper_key: hyper_key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <>;
            label = "HYPER_KEY";
        };
    };

    behaviors {
        shift_num_layer_when_held: shift_num_layer_when_held {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_NUM_LAYER_WHEN_HELD";
            bindings = <&shift_num_layer>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        enter_or_mouse: enter_or_mouse {
            compatible = "zmk,behavior-hold-tap";
            label = "ENTER_OR_MOUSE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        home_row_left: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <260>;
            require-prior-idle-ms = <120>;
            flavor = "balanced";
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 6 18 19 31 32 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        home_row_right: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <260>;
            flavor = "balanced";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <120>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 38 37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q  &kp W                   &kp E                          &kp R                      &kp T        &kp Y                    &kp U                    &kp I                           &kp O                       &kp P     &kp BSPC
&kp LSHIFT  &kp A  &home_row_left LCTRL S  &home_row_left LEFT_COMMAND D  &home_row_left LEFT_ALT F  &kp G        &kp H                    &home_row_right LCTRL J  &home_row_right LEFT_COMMAND K  &home_row_right LEFT_ALT L  &kp SEMI  &kp SQT
&kp LCTRL   &kp Z  &kp X                   &kp C                          &kp V                      &kp B        &kp N                    &kp M                    &kp COMMA                       &kp DOT                     &kp FSLH  &kp ESC
                                           &kp LS(LC(LA(LGUI)))           &mo 1                      &kp SPACE    &enter_or_mouse 4 ENTER  &mo 2                    &kp LEFT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp N1  &kp N2  &kp N3    &kp N4  &kp N5       &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &kp BSPC
&trans     &trans  &trans  &trans    &trans  &trans       &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &kp LSHIFT
&trans     &trans  &trans  &trans    &trans  &trans       &trans    &trans    &trans  &trans     &trans  &trans
                           &kp LGUI  &trans  &kp SPACE    &kp RET   &kp LGUI  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &trans  &trans    &trans  &trans       &trans   &kp LEFT_PARENTHESIS  &kp EQUAL        &kp RIGHT_PARENTHESIS  &trans  &trans
&trans  &trans  &trans  &trans    &trans  &trans       &trans   &kp LEFT_BRACKET      &kp MINUS        &kp RIGHT_BRACKET      &trans  &kp BACKSLASH
&trans  &trans  &trans  &trans    &trans  &trans       &trans   &kp LEFT_BRACE        &kp RIGHT_BRACE  &kp RIGHT_BRACE        &trans  &trans
                        &kp LGUI  &trans  &kp SPACE    &kp RET  &trans                &trans
            >;
        };

        layer_3 {
            bindings = <
&trans      &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)    &kp LS(NUMBER_6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(F10)  &trans
&kp F1      &kp F2            &kp F3            &kp F4            &kp F5            &kp F6              &kp F7            &kp F8      &kp F9      &kp F10     &kp F11      &kp F12
&bt BT_CLR  &bt BT_PRV        &bt BT_NXT        &trans            &trans            &trans              &trans            &trans      &trans      &trans      &trans       &trans
                                                &trans            &trans            &trans              &trans            &trans      &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &mkp MB4        &mmv MOVE_UP    &mkp MB5         &trans     &trans       &trans          &trans          &trans        &trans           &trans  &trans
&trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans     &trans       &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
&trans  &trans          &trans          &trans           &trans     &trans       &mkp LCLK       &mkp MCLK       &mkp RCLK     &none            &trans  &trans
                                        &mkp LCLK        &mkp MCLK  &mkp RCLK    &none           &none           &none
            >;
        };
    };
};
